/* ===================================================
 * budkit-editor.js v0.0.1
 * http://budkit.org/docs/editor
 * ===================================================
 * Copyright 2012 The BudKit Team
 *
 * This source file is subject to version 3.01 of the GNU/GPL License 
 * that is available through the world-wide-web at the following URI:
 * http://www.gnu.org/licenses/gpl.txt  If you did not receive a copy of
 * the GPL License and are unable to obtain it through the web, please
 * send a note to support@stonyhillshq.com so we can mail you a copy immediately.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!function($) {

    "use strict"

    //Class Definition
    var BKEditor = function(element, options) {

        var $editor = this;

        this.options = $.extend({}, $.fn.bkeditor.defaults, options)
        this.element = $(element);
        this.container = $("<div/>").addClass("bkeditor").insertAfter(this.element);
        this.editorbar = $("<div/>").hide().addClass("bkeditor-toolbar btn-toolbar").appendTo(this.container);
        
        //iframe
        this.iframe = $("<iframe/>").addClass("bkeditor-content input").css({"min-height": this.element.height()}).width(this.element.outerWidth()).appendTo(this.container) //.addClass("bkeditor-content input").appendTo(this.container).width(this.element.outerWidth()).attr("contenteditable", true);                     
        
        var edit = this.editor = this.iframe[0].contentWindow.document;
            edit.designMode = 'on';
            edit.open();
            edit.write(this.element.val());
            edit.close();
        
        //this.copyAttributes(["spellcheck", "value", "placeholder"]).from( this.element ).to(this.editor.body);
        $(edit.body).on('click keyup keydown mousedown blur', function(){ $editor.updateElement() });
        this.element.on('click keyup keydown mousedown blur', function(){ $editor.updateEditor() });

        this.togglePlaceHolder();
        this.element.hide();
        
        //Initialize the toolbar
        this.toolbar = new BKEditorToolbar( this , this.options);
    }

    BKEditor.prototype = {
        
        Constructor: BKEditor,
        
        toString: function(html) {
            html = html || false;
            return (!html) ? $(this.editor.body).text() : $(this.editor.body).html();
        },
        updateElement: function() {
            //this.toolbar.build();
            //console.log($editor);
            this.element.val( this.toString(true) );
        },
        updateEditor: function() {
            $(this.editor.body).html(this.element.val());
        },
        copyAttributes: function(attributesToCopy) {
            return {
                from: function(elementToCopyFrom) {
                    return {
                        to: function(elementToCopyTo) {
                            var attribute, i = 0, length = attributesToCopy.length;
                            for (; i < length; i++) {
                                attribute = attributesToCopy[i];
                                if (typeof(elementToCopyFrom.attr(attribute)) !== "undefined" && elementToCopyFrom.attr(attribute) !== "") {
                                    elementToCopyTo.attr(attribute, elementToCopyFrom.attr(attribute));
                                }
                            }
                        }
                    };
                }
            };
        },
        togglePlaceHolder: function() {
            var CLASS_NAME = "placeholder",
            $this   = this,
            $editor = $(this.editor.body),
            unset = function() {
                if ($editor.hasClass(CLASS_NAME)) {
                    $editor.empty();
                }
                $editor.removeClass(CLASS_NAME);
            },
            set = function() {
                if ($editor.is(":empty")) {
                    $editor.html($this.element.attr("placeholder"));
                    $editor.addClass(CLASS_NAME);
                }
            };
            $editor.bind("blur", set).bind("focus", unset);
            set();
        }  
    };
    var BKEditorToolbar = function($this, options){
        
        var $toolbar = this;
        this.options = $.extend({}, options);
        
        console.log(this.options.toolbar);
        
        $.each(this.options.toolbar, function(i, commands){
            if($.isArray(commands)){
                //Then we are defining a custom object
                //or it is a lonely item;
                $toolbar.getBtnGroup( commands , $toolbar).appendTo( $this.editorbar );
            } 
        });  
        //Show toolbar on focus, hide onexit;
        //console.log( $this.editor.html());
        $($this.editor.body).focus( function(){
            $this.editorbar.show();
        });   
    };
    BKEditorToolbar.prototype =  {
        commands : {
            submit : ['save', 'Save'], //class, title, function, ondraw, onClick
            bold : ['bold', 'Bold'],
            italic : ['italic', 'italic'],
            underline : ['underline', 'Underline'],
            strikethrough : ['strikethrough', 'Strike through'],
            orderedlist: ['list-ol', 'Insert ordered list'],
            unorderedlist:['list',  'Insert unordered list'],
            outdent: ['indent-right', 'Indent right'],
            indent: ['indent-left',   'Indent-left'],
            leftalign: ['align-left', 'Left Align'],
            centeralign: ['align-center', 'Centralize'],
            rightalign: ['align-right', 'Right Align'],
            blockjustify : ['align-justify', 'Justify'],
            undo: ['undo', 'Undo'],
            redo: ['repeat',  'Redo'],
            image: ['picture', 'Insert image'],
            link: ['link', 'Createlink']
        },
        addSeperator: function(){},
        getBtnGroup: function(group, $this){             
            var btnGroup = $("<div/>").addClass("btn-group");
            console.log(group);
            if(!$.isArray(group)) return btnGroup; 
            $.each(group, function(i, btn){
                $this.getBtn( btn , $this ).appendTo(btnGroup);
            });
      
            return btnGroup;
        },
        getBtn : function(button, $this){
            var btn = $("<a/>").addClass("btn"),
                btnicon = $("<i/>").addClass("icon"),
                commands = this.commands,
                btnObj = (typeof button == "string" && commands[button])? commands[button] : button;           
                
            if($.isArray(btnObj)){
                btnicon.addClass( "icon-"+btnObj[0] ).appendTo( btn );
                console.log(btnObj);
                return btn;
            } 
           return btn;
        },
        toggleBtnActive : function(){},
        toggleBtnDisable : function(){},
        inactivateAllBtn : function(){}
    }
    //Plugin Defintion
    $.fn.bkeditor = function(option) {
        return this.each(function() {
            var $this = $(this)
            , data = $this.data('bkeditor')
            , options = typeof option == 'object' && option;
            if (!data)
                $this.data('bkeditor', (data = new BKEditor(this, options)));
                //data.editor.on('click keyup keydown mousedown blur', function(){ data.updateElement()}).on('click', function(){ data.editor.focus() } ) 

        });
    };
    $.fn.bkeditor.defaults = {
        toolbar:[
            ["bold", "italic", "underline", "strikethrough"],
            ["orderedlist", "unorderedlist"],
            ["indent", "outdent"],
            ["leftalign", "centeralign", "rightalign", "blockjustify"],
            ["link","image"],
            ["submit"]
        ]
    };
    $.fn.bkeditor.Constructor = BKEditor;
}(window.jQuery);

